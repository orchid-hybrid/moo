(load "../utilities/pattern.scm")
(load "../utilities/hoas.scm")

(define (interpreter-eval t)
  (t (lambda () (error "nil"))
     (lambda (s) (error "symbol"))
     (lambda (v) (interpreter-eval v))
     (lambda (q) (quasi (interpreter-quasiquote q)))
     (lambda (q) (error "unquote outside quasiquote"))
     (lambda (nms f) (lam nms f))
     (lambda (exp)
       (if (>= (length exp) 1)
           (let ((f (interpreter-eval (car exp)))
                 (args (map interpreter-eval (cdr exp))))
             (interpreter-apply f args))
           (error "null application")))))

(define (interpreter-quasiquote q)
  (if (pair? q)
      (cons (interpreter-quasiquote (car q))
            (interpreter-quasiquote (cdr q)))
      (q (lambda () (nil))
         (lambda (s) (sym s))
         (lambda (v) (var v))
         (lambda (q) (quasi q))
         (lambda (q) (unquot (interpreter-eval q)))
         (lambda (nms f) (lam nms f))
         (lambda exp (apply app exp)))))

(define (interpreter-apply f args)
  (f (lambda () (error "expected function got nil"))
     (lambda (s) (error "expected function got symbol"))
     (lambda (v) (error "expected function got variable"))
     (lambda (q) (error "expected function got quasiquote"))
     (lambda (q) (error "expected function got unquote outside quasiquote!"))
     (lambda (nms f)
       (if (= (length nms) (length args))
           (interpreter-eval (apply f args))
           (error "wrong number of arguments to lambda")))
     (lambda (exp)
       (error "expected function value got application"))))

(define example-1
  '((lambda (x) (x (lambda (i) i)))
    (lambda (e)
      ((lambda (a b) (a (lambda () (b (lambda () (lambda (t f) (t)))
                                      (lambda () (lambda (t f) (f)))))
                        (lambda () (lambda (t f) (f)))))
       (lambda (t f) (t))
       (lambda (t f) (f))))))

(define example-2
  '((lambda (x)
      `(x ,x x))
    `y))

(define (interpreter-test exp)
  (concretize (interpreter-eval ((hoas '()) exp))))
